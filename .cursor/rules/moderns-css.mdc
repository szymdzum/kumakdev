---
description: 
globs: 
alwaysApply: true
---
/*
 * Every Layout - Box
 * A layout primitive for creating boxed content
 */

.box {
  /* Apply padding based on modular scale */
  padding: var(--padding, var(--s1));
  
  /* Optional border */
  border-width: var(--border-width, var(--border-thin));
  
  /* Default colors */
  background-color: var(--color-light);
  color: var(--color-dark);
  
  /* For high contrast mode support */
  outline: var(--border-width, var(--border-thin)) transparent;
  outline-offset: calc(var(--border-width, var(--border-thin)) * -1);
}

/* Force children to inherit text color */
.box * {
  color: inherit;
}

/* Inverted version */
.box.invert {
  background-color: var(--color-dark);
  color: var(--color-light);
}

/* Optional variants */
.box.shadow {
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
}

.box.rounded {
  border-radius: var(--s-1);
}

.box.border-thick {
  --border-width: var(--border-thick);
}

.box.border-none {
  --border-width: 0;
}

.box.padding-large {
  --padding: var(--s2);
}

.box.padding-small {
  --padding: var(--s-1);
}

.box.padding-none {
  --padding: 0;
}

/* HTML usage:
<div class="box">
  Content goes here
</div>

Inverted:
<div class="box invert">
  Content goes here
</div>

With custom padding:
<div class="box" style="--padding: 2rem;">
  Content goes here
</div>
*/

/*
 * Every Layout - Center
 * A layout primitive for horizontally centering content
 */

.center {
  /* Remove padding from width calculation */
  box-sizing: content-box;
  
  /* Configure widths */
  max-width: var(--max-width, var(--measure));
  
  /* Center horizontally */
  margin-inline: auto;
  
  /* Maintain minimum spacing on edges */
  padding-inline: var(--padding, var(--s1));
}

/* Text centering variant */
.center.text-center {
  text-align: center;
}

/* Intrinsic centering (centers child elements) */
.center.intrinsic {
  display: flex;
  flex-direction: column;
  align-items: center;
}

/* Optional width variants */
.center.measure {
  --max-width: var(--measure);
}

.center.measure-narrow {
  --max-width: calc(var(--measure) / 1.5);
}

.center.measure-wide {
  --max-width: calc(var(--measure) * 1.5);
}

/* Responsive padding */
@media (min-width: 40em) {
  .center.responsive-padding {
    --padding: var(--s2);
  }
}

/* HTML usage:
<div class="center">
  <p>Centered content with a max-width.</p>
</div>

With text centering:
<div class="center text-center">
  <p>Centered content with centered text.</p>
</div>

Intrinsic centering:
<div class="center intrinsic">
  <button>This button is centered</button>
  <p>This paragraph takes up the full width</p>
</div>

Custom width:
<div class="center" style="--max-width: 40rem;">
  Content goes here
</div>
*/

/*
 * Every Layout - Cluster
 * A layout primitive for clusters of elements with consistent spacing
 */

.cluster {
  /* Set up flexbox context */
  display: flex;
  
  /* Allow wrapping */
  flex-wrap: wrap;
  
  /* Configure spacing between items */
  gap: var(--space, var(--s1));
  
  /* Default alignment */
  justify-content: flex-start;
  align-items: flex-start;
}

/* Alignment variations */
.cluster.justify-center {
  justify-content: center;
}

.cluster.justify-end {
  justify-content: flex-end;
}

.cluster.justify-between {
  justify-content: space-between;
}

.cluster.justify-around {
  justify-content: space-around;
}

.cluster.align-center {
  align-items: center;
}

.cluster.align-end {
  align-items: flex-end;
}

.cluster.align-stretch {
  align-items: stretch;
}

/* Spacing variations */
.cluster.space-small {
  --space: var(--s-1);
}

.cluster.space-large {
  --space: var(--s2);
}

/* For browsers that don't support gap */
@supports not (gap: 1rem) {
  .cluster {
    margin: calc(var(--space, var(--s1)) / 2 * -1);
  }
  
  .cluster > * {
    margin: calc(var(--space, var(--s1)) / 2);
  }
}

/* HTML usage:
<div class="cluster">
  <div>Item 1</div>
  <div>Item 2</div>
  <div>Item 3</div>
</div>

Centered:
<div class="cluster justify-center align-center">
  <div>Item 1</div>
  <div>Item 2</div>
  <div>Item 3</div>
</div>

Custom spacing:
<div class="cluster" style="--space: 2rem;">
  <div>Item 1</div>
  <div>Item 2</div>
</div>
*/
/*
 * Every Layout CSS Library
 * A complete collection of layout primitives based on Every Layout principles
 * by Heydon Pickering and Andy Bell
 */

/* ===== Base Styles ===== */
:root {
  /* Modular scale ratio - 1.5 is a good default */
  --ratio: 1.5;
  
  /* Space values using modular scale */
  --s-5: calc(var(--s-4) / var(--ratio));
  --s-4: calc(var(--s-3) / var(--ratio));
  --s-3: calc(var(--s-2) / var(--ratio));
  --s-2: calc(var(--s-1) / var(--ratio));
  --s-1: calc(var(--s0) / var(--ratio));
  --s0: 1rem;
  --s1: calc(var(--s0) * var(--ratio));
  --s2: calc(var(--s1) * var(--ratio));
  --s3: calc(var(--s2) * var(--ratio));
  --s4: calc(var(--s3) * var(--ratio));
  --s5: calc(var(--s4) * var(--ratio));
  
  /* Measure (line-length) */
  --measure: 60ch;
  
  /* Border values */
  --border-thin: 1px;
  --border-thick: 0.25rem;
  
  /* Colors */
  --color-light: #fff;
  --color-dark: #222;
}

*,
*::before,
*::after {
  box-sizing: border-box;
  margin: 0;
  border-style: solid;
  border-width: 0;
}

body {
  font-size: 1rem;
  line-height: 1.5;
  font-family: system-ui, sans-serif;
  color: var(--color-dark);
  background-color: var(--color-light);
}

p, h1, h2, h3, h4, h5, h6, li, figcaption {
  max-width: var(--measure);
}

img, svg, video {
  max-width: 100%;
  height: auto;
  display: block;
}

ul[class],
ol[class] {
  list-style: none;
  padding-left: 0;
}

@media (forced-colors: active) {
  * {
    border-color: CanvasText;
  }
}

@media (min-width: 40em) {
  :root {
    font-size: calc(1rem + 0.25vw);
  }
}

/* ===== Stack Layout ===== */
.stack {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
}

.stack > * {
  margin-block: 0;
}

.stack > * + * {
  margin-block-start: var(--space, var(--s1));
}

.stack.split {
  height: 100%;
}

.stack.split > :nth-child(1) {
  margin-block-end: auto;
}

.stack.recursive * + * {
  margin-block-start: var(--space, var(--s1));
}

/* ===== Box Layout ===== */
.box {
  padding: var(--padding, var(--s1));
  border-width: var(--border-width, var(--border-thin));
  background-color: var(--color-light);
  color: var(--color-dark);
  outline: var(--border-width, var(--border-thin)) transparent;
  outline-offset: calc(var(--border-width, var(--border-thin)) * -1);
}

.box * {
  color: inherit;
}

.box.invert {
  background-color: var(--color-dark);
  color: var(--color-light);
}

/* ===== Center Layout ===== */
.center {
  box-sizing: content-box;
  max-width: var(--max-width, var(--measure));
  margin-inline: auto;
  padding-inline: var(--padding, var(--s1));
}

.center.text-center {
  text-align: center;
}

.center.intrinsic {
  display: flex;
  flex-direction: column;
  align-items: center;
}

/* ===== Cluster Layout ===== */
.cluster {
  display: flex;
  flex-wrap: wrap;
  gap: var(--space, var(--s1));
  justify-content: flex-start;
  align-items: flex-start;
}

@supports not (gap: 1rem) {
  .cluster {
    margin: calc(var(--space, var(--s1)) / 2 * -1);
  }
  
  .cluster > * {
    margin: calc(var(--space, var(--s1)) / 2);
  }
}

/* ===== Sidebar Layout ===== */
.with-sidebar {
  display: flex;
  flex-wrap: wrap;
  gap: var(--space, var(--s1));
}

.with-sidebar > .sidebar {
  flex-basis: var(--sidebar-width, 20rem);
  flex-grow: 1;
}

.with-sidebar > .not-sidebar {
  flex-basis: 0;
  flex-grow: 999;
  min-width: var(--content-min, 50%);
}

.with-sidebar.sidebar-right {
  flex-direction: row-reverse;
}

.with-sidebar.no-stretch {
  align-items: flex-start;
}

/* ===== Switcher Layout ===== */
.switcher {
  --threshold: var(--measure);
  
  display: flex;
  flex-wrap: wrap;
  gap: var(--space, var(--s1));
}

.switcher > * {
  flex-grow: 1;
  flex-basis: calc((var(--threshold) - 100%) * 999);
}

.switcher > :nth-last-child(n+5),
.switcher > :nth-last-child(n+5) ~ * {
  flex-basis: 100%;
}

@supports (width: min(var(--threshold), 100%)) {
  .switcher.safe-threshold > * {
    flex-basis: calc((min(var(--threshold), 100%) - 100%) * 999);
  }
}

/* ===== Cover Layout ===== */
.cover {
  display: flex;
  flex-direction: column;
  min-height: var(--min-height, 100vh);
  padding: var(--padding, var(--s1));
}

.cover > * {
  margin-block: var(--space, var(--s1));
}

.cover > h1,
.cover > [data-centered] {
  margin-block-start: auto;
  margin-block-end: auto;
}

.cover > :first-child:not(h1):not([data-centered]) {
  margin-block-start: 0;
}

.cover > :last-child:not(h1):not([data-centered]) {
  margin-block-end: 0;
}

/* ===== Grid Layout ===== */
.grid {
  display: grid;
  gap: var(--space, var(--s1));
  --min: var(--grid-min, 250px);
}

@supports (width: min(var(--min), 100%)) {
  .grid {
    grid-template-columns: repeat(auto-fit, minmax(min(var(--min), 100%), 1fr));
  }
}

@supports not (width: min(var(--min), 100%)) {
  .grid {
    grid-template-columns: 1fr;
  }
  
  .grid.aboveMin {
    grid-template-columns: repeat(auto-fit, minmax(var(--min), 1fr));
  }
}

/* ===== Frame Layout ===== */
.frame {
  --n: 16;
  --d: 9;
  
  padding-bottom: calc(var(--n) / var(--d) * 100%);
  position: relative;
}

.frame > * {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  overflow: hidden;
}

.frame > img,
.frame > video {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

/* ===== Reel Layout ===== */
.reel {
  --height: auto;
  --item-width: auto;
  --space: var(--s1);
  
  display: flex;
  height: var(--height);
  overflow-x: auto;
  overflow-y: hidden;
  scrollbar-color: var(--color-light) var(--color-dark);
  overscroll-behavior-x: contain;
  -webkit-overflow-scrolling: touch;
}

.reel::-webkit-scrollbar {
  height: 1rem;
}

.reel::-webkit-scrollbar-track {
  background-color: var(--color-dark);
}

.reel::-webkit-scrollbar-thumb {
  background-color: var(--color-dark);
  background-image: linear-gradient(
    var(--color-dark) 0,
    var(--color-dark) 0.25rem,
    var(--color-light) 0.25rem,
    var(--color-light) 0.75rem,
    var(--color-dark) 0.75rem
  );
}

.reel > * {
  flex: 0 0 var(--item-width);
}

.reel > img {
  height: 100%;
  flex-basis: auto;
  width: auto;
}

.reel > * + * {
  margin-left: var(--space);
}

.reel::after {
  content: '';
  flex: 0 0 var(--space);
}

.reel.overflowing {
  padding-bottom: var(--space);
}

.reel.no-scrollbar {
  scrollbar-width: none;
}

.reel.no-scrollbar::-webkit-scrollbar {
  display: none;
}

/* ===== Imposter Layout ===== */
.imposter {
  --margin: 0px;
  
  position: var(--positioning, absolute);
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  z-index: 1;
}

.imposter.contain {
  overflow: auto;
  max-width: calc(100% - (var(--margin) * 2));
  max-height: calc(100% - (var(--margin) * 2));
}

.imposter.fixed {
  --positioning: fixed;
}

/* ===== Icon Layout ===== */
.icon {
  height: 0.75em;
  width: 0.75em;
  height: 1cap;
  width: 1cap;
  display: inline-block;
  vertical-align: baseline;
}

.icon svg {
  height: 100%;
  width: 100%;
  fill: currentColor;
}

.with-icon {
  display: inline-flex;
  align-items: baseline;
}

.with-icon .icon {
  margin-inline-end: var(--icon-space, 0.5em);
}

.with-icon.icon-right .icon {
  order: 1;
  margin-inline-start: var(--icon-space, 0.5em);
  margin-inline-end: 0;
}

/* ===== Utility Classes ===== */
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border-width: 0;
}

/* Selection of important utilities - see utilities.css for the full set */
.text-align\:center { text-align: center !important; }
.width\:100\% { width: 100% !important; }
.max-width\:measure { max-width: var(--measure) !important; }
.display\:flex { display: flex !important; }
.align-items\:center { align-items: center !important; }
.justify-content\:center { justify-content: center !important; }
.margin\:0 { margin: 0 !important; }
.padding\:0 { padding: 0 !important; }


/*
 * Every Layout - Stack
 * A layout primitive for stacking elements with consistent spacing
 */

.stack {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
}

.stack > * {
  /* Remove any margin that might be present */
  margin-block: 0;
}

.stack > * + * {
  /* Add margin only between elements */
  margin-block-start: var(--space, var(--s1));
}

/* Split variant - pushes an element to the bottom */
.stack.split {
  height: 100%;
}

.stack.split > :nth-child(1) {
  margin-block-end: auto;
}

/* Recursive variant - applies to all levels of nesting */
.stack.recursive * + * {
  margin-block-start: var(--space, var(--s1));
}

/* Examples of different spacings you can apply */
.stack-large {
  --space: var(--s3);
}

.stack-medium {
  --space: var(--s2);
}

.stack-small {
  --space: var(--s-1);
}

/* Custom exception class for individual items */
.stack-exception {
  --space: var(--s4);
}

/* HTML usage:
<div class="stack">
  <div>Item 1</div>
  <div>Item 2</div>
  <div>Item 3</div>
</div>

With split:
<div class="stack split">
  <div>Item at top</div>
  <div>Item pushed to bottom</div>
</div>

With custom spacing:
<div class="stack" style="--space: 2rem;">
  <div>Item 1</div>
  <div>Item 2</div>
</div>
*/

# Every Layout CSS Library

A comprehensive CSS layout library based on the principles from [Every Layout](https://every-layout.dev/) by Heydon Pickering and Andy Bell. This library provides robust, responsive layout primitives that work across devices without heavy reliance on media queries.

## Features

- **Algorithm-based layouts** that automatically adapt to available space
- **Responsive by default** with minimal use of media queries
- **Composition-focused** - combining simple primitives creates complex layouts
- **Intrinsic sizing** using modular scale for consistent spacing
- **Accessible** with high contrast mode support and appropriate semantics
- **Two implementation options**: CSS classes or Web Components

## Installation

### Option 1: Use the complete CSS file

```html
<link rel="stylesheet" href="every-layout.css">
```

### Option 2: Use individual components as needed

```html
<link rel="stylesheet" href="global.css">
<link rel="stylesheet" href="components/stack.css">
<link rel="stylesheet" href="components/box.css">
<!-- Add other components as needed -->
```

### Option 3: Use Web Components (HTML custom elements)

```html
<script src="every-layout-components.js"></script>
```

## Layout Primitives

### Stack

For vertical spacing between elements.

```html
<!-- CSS class approach -->
<div class="stack">
  <h2>Title</h2>
  <p>Content</p>
</div>

<!-- Web Component approach -->
<stack-l space="var(--s1)">
  <h2>Title</h2>
  <p>Content</p>
</stack-l>
```

### Box

For creating visual containers with padding and optional borders.

```html
<!-- CSS class approach -->
<div class="box">
  <h2>Card title</h2>
  <p>Card content</p>
</div>

<!-- Web Component approach -->
<box-l padding="var(--s1)">
  <h2>Card title</h2>
  <p>Card content</p>
</box-l>
```

### Center

For horizontal centering with an optional max-width.

```html
<!-- CSS class approach -->
<div class="center">
  <h2>Centered content</h2>
</div>

<!-- Web Component approach -->
<center-l max="60ch">
  <h2>Centered content</h2>
</center-l>
```

### Cluster

For grouped elements that wrap with consistent spacing.

```html
<!-- CSS class approach -->
<div class="cluster">
  <div>Item 1</div>
  <div>Item 2</div>
</div>

<!-- Web Component approach -->
<cluster-l space="var(--s1)" justify="flex-start">
  <div>Item 1</div>
  <div>Item 2</div>
</cluster-l>
```

### Sidebar

For a sidebar layout that wraps responsively.

```html
<!-- CSS class approach -->
<div class="with-sidebar">
  <div class="sidebar">Sidebar</div>
  <div class="not-sidebar">Main content</div>
</div>

<!-- Web Component approach -->
<sidebar-l side-width="15rem" content-min="65%">
  <div>Sidebar</div>
  <div>Main content</div>
</sidebar-l>
```

### Switcher

For switching between horizontal and vertical layout.

```html
<!-- CSS class approach -->
<div class="switcher">
  <div>Item 1</div>
  <div>Item 2</div>
</div>

<!-- Web Component approach -->
<switcher-l threshold="30rem">
  <div>Item 1</div>
  <div>Item 2</div>
</switcher-l>
```

### Cover

For vertically centered content with optional header/footer.

```html
<!-- CSS class approach -->
<div class="cover">
  <header>Header</header>
  <h1>Centered content</h1>
  <footer>Footer</footer>
</div>

<!-- Web Component approach -->
<cover-l min-height="100vh">
  <header>Header</header>
  <h1>Centered content</h1>
  <footer>Footer</footer>
</cover-l>
```

### Grid

For responsive grid layouts without media queries.

```html
<!-- CSS class approach -->
<div class="grid">
  <div>Item 1</div>
  <div>Item 2</div>
</div>

<!-- Web Component approach -->
<grid-l min="250px" space="var(--s1)">
  <div>Item 1</div>
  <div>Item 2</div>
</grid-l>
```

### Frame

For cropping content to a specific aspect ratio.

```html
<!-- CSS class approach -->
<div class="frame ratio-square">
  <img src="image.jpg" alt="Description">
</div>

<!-- Web Component approach -->
<frame-l ratio="1:1">
  <img src="image.jpg" alt="Description">
</frame-l>
```

### Reel

For horizontally scrollable layouts.

```html
<!-- CSS class approach -->
<div class="reel">
  <div>Item 1</div>
  <div>Item 2</div>
</div>

<!-- Web Component approach -->
<reel-l item-width="20rem">
  <div>Item 1</div>
  <div>Item 2</div>
</reel-l>
```

### Imposter

For positioning content over other content.

```html
<!-- CSS class approach -->
<div style="position: relative;">
  <div class="imposter">
    <div>Centered overlaid content</div>
  </div>
</div>

<!-- Web Component approach -->
<div style="position: relative;">
  <imposter-l margin="2rem">
    <div>Centered overlaid content</div>
  </imposter-l>
</div>
```

### Icon

For consistent icon sizing and spacing.

```html
<!-- CSS class approach -->
<span class="with-icon">
  <span class="icon">
    <svg><!-- icon content --></svg>
  </span>
  Text with icon
</span>

<!-- Web Component approach -->
<icon-l space="0.5em">
  <svg><!-- icon content --></svg>
  Text with icon
</icon-l>
```

## Customization

The library uses CSS custom properties (variables) for customization, which can be overridden at different levels:

```css
/* Global overrides */
:root {
  --measure: 70ch;
  --s1: 1.2rem;
  --color-dark: #333;
}

/* Component-specific overrides */
.stack {
  --space: 2rem;
}

/* Inline overrides */
<div class="box" style="--padding: 2rem;">
  Content
</div>
```

## Browser Support

The library works in all modern browsers. Some features have fallbacks for older browsers:

- CSS Grid layout falls back to single column in browsers without `min()` support
- Reel component provides scrollbar styling options for different browsers
- Web Components require browsers that support Custom Elements v1

## Utility Classes

The library includes utility classes following the `property-name\:value` naming convention:

```html
<div class="text-align:center">
  Centered text
</div>

<div class="max-width:measure">
  Text with a reasonable width
</div>
```

## License

This implementation is provided under the MIT license. The original Every Layout concepts were created by Heydon Pickering and Andy Bell.

## Acknowledgements

This library is based on the principles and techniques described in [Every Layout](https://every-layout.dev/) by Heydon Pickering and Andy Bell. While this implementation is independently created, we highly recommend purchasing their book for a deeper understanding of the principles behind these layouts.


/*
 * Every Layout - Imposter
 * A layout primitive for positioning content over other content
 */

.imposter {
  /* Default settings */
  --margin: 0px;
  
  /* Position the element within a positioned ancestor */
  position: var(--positioning, absolute);
  
  /* Position the top left corner at the center */
  top: 50%;
  left: 50%;
  
  /* Adjust to perfectly center the element */
  transform: translate(-50%, -50%);
  
  /* For high contrast mode */
  z-index: 1;
}

/* Contained variant - prevents overflow */
.imposter.contain {
  /* Prevent content from spilling outside container */
  overflow: auto;
  
  /* Restrict maximum dimensions */
  max-width: calc(100% - (var(--margin) * 2));
  max-height: calc(100% - (var(--margin) * 2));
}

/* Fixed positioning variant */
.imposter.fixed {
  --positioning: fixed;
}

/* Optional variants */
.imposter.margin-small {
  --margin: var(--s1);
}

.imposter.margin-medium {
  --margin: var(--s2);
}

.imposter.margin-large {
  --margin: var(--s3);
}

/* Scrim/background variant */
.imposter.with-scrim::before {
  content: '';
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  background: rgba(0, 0, 0, 0.75);
  z-index: -1;
}

/* HTML usage:
<div style="position: relative;">
  <div>Base content</div>
  <div class="imposter">
    <div>Centered content</div>
  </div>
</div>

Fixed positioning:
<div class="imposter fixed contain">
  <div>Fixed centered content</div>
</div>

With margin:
<div style="position: relative;">
  <div>Base content</div>
  <div class="imposter contain" style="--margin: 2rem;">
    <div>Centered content with margin</div>
  </div>
</div>

With scrim:
<div style="position: relative;">
  <div>Base content</div>
  <div class="imposter with-scrim">
    <div>Content with background</div>
  </div>
</div>
*/

/*
 * Every Layout - Icon
 * A layout primitive for properly sizing and spacing icons
 */

.icon {
  /* Base sizing - matches capital letter height */
  height: 0.75em;
  width: 0.75em;
  
  /* Prefer cap unit when available */
  height: 1cap;
  width: 1cap;
  
  /* Defaults */
  display: inline-block;
  vertical-align: baseline;
}

/* For SVGs */
.icon svg {
  /* Make it fill the .icon element */
  height: 100%;
  width: 100%;
  
  /* Ensure proper fill */
  fill: currentColor;
}

/* Alternative size - x-height */
.icon.x-height {
  height: 1ex;
  width: 1ex;
}

/* Size variants */
.icon.small {
  height: 0.5em;
  width: 0.5em;
}

.icon.large {
  height: 1em;
  width: 1em;
}

.icon.larger {
  height: 1.5em;
  width: 1.5em;
}

/* For more precise spacing control */
.with-icon {
  /* For spacing control */
  display: inline-flex;
  align-items: baseline;
}

.with-icon .icon {
  /* Space after icon */
  margin-inline-end: var(--icon-space, 0.5em);
}

/* Position variants */
.with-icon.icon-right .icon {
  order: 1;
  margin-inline-start: var(--icon-space, 0.5em);
  margin-inline-end: 0;
}

/* Vertical alignment variants */
.with-icon.icon-center {
  align-items: center;
}

.with-icon.icon-top {
  align-items: flex-start;
}

/* HTML usage:
<!-- Simple icon -->
<span class="icon">
  <svg viewBox="0 0 24 24">
    <!-- SVG paths here -->
  </svg>
</span>

<!-- Icon with text -->
<span class="with-icon">
  <span class="icon">
    <svg viewBox="0 0 24 24">
      <!-- SVG paths here -->
    </svg>
  </span>
  Icon with text
</span>

<!-- Icon on the right -->
<span class="with-icon icon-right">
  Text with icon
  <span class="icon">
    <svg viewBox="0 0 24 24">
      <!-- SVG paths here -->
    </svg>
  </span>
</span>

<!-- Custom spacing -->
<span class="with-icon" style="--icon-space: 1em;">
  <span class="icon">
    <svg viewBox="0 0 24 24">
      <!-- SVG paths here -->
    </svg>
  </span>
  Icon with more space
</span>
*/

/*
 * Every Layout - Grid
 * A layout primitive for creating responsive grid layouts without media queries
 */

.grid {
  /* Establish grid context */
  display: grid;
  
  /* Set gap between grid items */
  gap: var(--space, var(--s1));
  
  /* Set minimum column width */
  --min: var(--grid-min, 250px);
}

/* For browsers that support min() function */
@supports (width: min(var(--min), 100%)) {
  .grid {
    /* Create responsive columns that automatically adjust */
    grid-template-columns: repeat(auto-fit, minmax(min(var(--min), 100%), 1fr));
  }
}

/* Fallback for browsers that don't support min() */
@supports not (width: min(var(--min), 100%)) {
  .grid {
    /* Default to single column */
    grid-template-columns: 1fr;
  }
  
  /* JavaScript can add this class when container is wider than minimum */
  .grid.aboveMin {
    grid-template-columns: repeat(auto-fit, minmax(var(--min), 1fr));
  }
}

/* Variant: Small item minimum width */
.grid.small-items {
  --grid-min: 15rem;
}

/* Variant: Large item minimum width */
.grid.large-items {
  --grid-min: 30rem;
}

/* Variant: Small gap */
.grid.gap-small {
  --space: var(--s-1);
}

/* Variant: Large gap */
.grid.gap-large {
  --space: var(--s2);
}

/* Variant: Fixed-column grids */
.grid.columns-2 {
  grid-template-columns: repeat(2, 1fr);
}

.grid.columns-3 {
  grid-template-columns: repeat(3, 1fr);
}

.grid.columns-4 {
  grid-template-columns: repeat(4, 1fr);
}

/* Responsive variants (combine with auto-fit for more flexibility) */
@media (min-width: 40em) {
  .grid.md\:columns-2 {
    grid-template-columns: repeat(2, 1fr);
  }
}

@media (min-width: 60em) {
  .grid.lg\:columns-3 {
    grid-template-columns: repeat(3, 1fr);
  }
}

/* HTML usage:
<div class="grid">
  <div>Item 1</div>
  <div>Item 2</div>
  <div>Item 3</div>
  <div>Item 4</div>
</div>

With custom min-width:
<div class="grid" style="--grid-min: 20rem;">
  <div>Item 1</div>
  <div>Item 2</div>
</div>

Fixed columns on large screens:
<div class="grid lg:columns-3">
  <div>Item 1</div>
  <div>Item 2</div>
  <div>Item 3</div>
</div>
*/

/*
 * Every Layout - Frame
 * A layout primitive for cropping content to a specific aspect ratio
 */

.frame {
  --n: 16; /* Default aspect ratio numerator (width) */
  --d: 9;  /* Default aspect ratio denominator (height) */
  
  /* Create the aspect ratio */
  padding-bottom: calc(var(--n) / var(--d) * 100%);
  
  /* Set up positioning context for child */
  position: relative;
}

.frame > * {
  /* Position the content absolutely inside the frame */
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  
  /* Make it a flex container for centering content */
  display: flex;
  justify-content: center;
  align-items: center;
  
  /* Prevent content overflow */
  overflow: hidden;
}

/* Make images and videos fill the frame */
.frame > img,
.frame > video {
  /* Take up all available space */
  width: 100%;
  height: 100%;
  
  /* Maintain aspect ratio and cover frame */
  object-fit: cover;
}

/* Common aspect ratio variants */
.frame.ratio-square {
  --n: 1;
  --d: 1;
}

.frame.ratio-4\:3 {
  --n: 4;
  --d: 3;
}

.frame.ratio-16\:9 {
  --n: 16;
  --d: 9;
}

.frame.ratio-3\:2 {
  --n: 3;
  --d: 2;
}

.frame.ratio-2\:1 {
  --n: 2;
  --d: 1;
}

/* Adjust aspect ratio based on viewport orientation */
@media (orientation: portrait) {
  .frame.portrait-square {
    --n: 1;
    --d: 1;
  }
  
  .frame.portrait-taller {
    --n: 3;
    --d: 4;
  }
}

/* HTML usage:
<div class="frame">
  <img src="image.jpg" alt="Description">
</div>

With a specific aspect ratio:
<div class="frame ratio-square">
  <img src="image.jpg" alt="Description">
</div>

With custom ratio:
<div class="frame" style="--n: 2; --d: 3;">
  <img src="image.jpg" alt="Description">
</div>

With non-image content:
<div class="frame ratio-square">
  <div>Content to be centered and cropped</div>
</div>
*/

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Every Layout - Example Compositions</title>
  <link rel="stylesheet" href="every-layout.css">
  <style>
    /* Demo styles - not required for Every Layout */
    body {
      color: #333;
      font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
    }
    
    .demo-layout {
      margin-bottom: 4rem;
      border-bottom: 1px solid #ddd;
      padding-bottom: 2rem;
    }
    
    .demo-title {
      margin-bottom: 1.5rem;
    }
    
    code {
      background: #f5f5f5;
      padding: 0.2em 0.4em;
      border-radius: 3px;
      font-size: 0.9em;
      font-family: Consolas, Monaco, 'Andale Mono', monospace;
    }
    
    .box {
      border: 1px solid #ddd;
    }
    
    .demo-box {
      background-color: #f0f0f0;
      border: 1px dashed #999;
      padding: 1rem;
      text-align: center;
    }
    
    .sidebar-box {
      background-color: #e0e0e0;
    }
    
    button {
      background: #0077cc;
      color: white;
      border: none;
      padding: 0.5rem 1rem;
      border-radius: 4px;
      font-weight: bold;
      cursor: pointer;
    }
    
    button.secondary {
      background: #e0e0e0;
      color: #333;
    }
    
    img {
      max-width: 100%;
      height: auto;
    }
    
    .navigation {
      list-style: none;
      padding: 0;
      margin: 0;
    }
    
    .navigation a {
      text-decoration: none;
      color: #0077cc;
      font-weight: 500;
    }
    
    .card {
      background-color: white;
      border-radius: 8px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
      overflow: hidden;
    }
    
    .tag {
      background: #e0e0e0;
      color: #333;
      padding: 0.25rem 0.5rem;
      border-radius: 4px;
      font-size: 0.8rem;
    }
    
    .avatar {
      width: 60px;
      height: 60px;
      border-radius: 50%;
      object-fit: cover;
    }
  </style>
</head>
<body>
  <div class="center">
    <div class="stack">
      <h1 class="demo-title">Every Layout - Example Compositions</h1>
      <p>This page demonstrates common UI patterns built by composing Every Layout primitives.</p>
      
      <!-- EXAMPLE 1: Basic Card -->
      <section class="demo-layout">
        <h2 class="demo-title">1. Basic Card</h2>
        <div class="box card" style="max-width: 300px;">
          <div class="stack">
            <h3>Card Title</h3>
            <p>This is a simple card created using the <code>Box</code> and <code>Stack</code> layouts.</p>
            <button>Action Button</button>
          </div>
        </div>
      </section>
      
      <!-- EXAMPLE 2: Media Object -->
      <section class="demo-layout">
        <h2 class="demo-title">2. Media Object</h2>
        <div class="with-sidebar" style="--sidebar-width: 80px; --content-min: 70%;">
          <div class="sidebar">
            <img src="https://via.placeholder.com/80" alt="User avatar" class="avatar">
          </div>
          <div class="not-sidebar">
            <div class="stack" style="--space: 0.5rem;">
              <h3 style="margin: 0;">John Doe</h3>
              <p style="margin: 0;">This is a comment or post by the user. The media object pattern is one of the most versatile layouts in web design.</p>
            </div>
          </div>
        </div>
      </section>
      
      <!-- EXAMPLE 3: Hero Section -->
      <section class="demo-layout">
        <h2 class="demo-title">3. Hero Section</h2>
        <div class="box" style="background-color: #f5f7fa;">
          <div class="cover" style="--min-height: 50vh; --padding: var(--s2);">
            <div class="center">
              <div class="stack" style="--space: var(--s2); text-align: center;">
                <h1 style="font-size: 2.5rem; margin: 0;">Welcome to Our Website</h1>
                <p style="font-size: 1.25rem; max-width: 35ch; margin: 0 auto;">A powerful hero section created with the <code>Cover</code>, <code>Center</code>, and <code>Stack</code> layouts.</p>
                <div class="cluster justify-center">
                  <button>Get Started</button>
                  <button class="secondary">Learn More</button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>
      
      <!-- EXAMPLE 4: Feature Grid -->
      <section class="demo-layout">
        <h2 class="demo-title">4. Feature Grid</h2>
        <div class="grid" style="--grid-min: 250px; --space: var(--s2);">
          <div class="box">
            <div class="stack">
              <h3>Feature One</h3>
              <p>Description of the first feature. This uses the <code>Grid</code> layout with <code>Box</code> elements.</p>
            </div>
          </div>
          <div class="box">
            <div class="stack">
              <h3>Feature Two</h3>
              <p>Description of the second feature. Each card auto-adjusts based on available space.</p>
            </div>
          </div>
          <div class="box">
            <div class="stack">
              <h3>Feature Three</h3>
              <p>Description of the third feature. No media queries are needed for this responsive layout.</p>
            </div>
          </div>
          <div class="box">
            <div class="stack">
              <h3>Feature Four</h3>
              <p>Description of the fourth feature. Try resizing your browser to see how it adapts.</p>
            </div>
          </div>
        </div>
      </section>
      
      <!-- EXAMPLE 5: Product Card -->
      <section class="demo-layout">
        <h2 class="demo-title">5. Product Card</h2>
        <div class="box card" style="max-width: 300px;">
          <div class="stack">
            <div class="frame ratio-4:3">
              <img src="https://via.placeholder.com/400x300" alt="Product image">
            </div>
            <div class="stack" style="--space: 0.75rem; padding: 0 var(--s1) var(--s1) var(--s1);">
              <h3 style="margin: 0;">Product Name</h3>
              <p style="margin: 0;">Brief product description showcasing key features.</p>
              <div class="cluster justify-between align-center">
                <strong>$49.99</strong>
                <button>Add to Cart</button>
              </div>
            </div>
          </div>
        </div>
      </section>
      
      <!-- EXAMPLE 6: Blog Layout -->
      <section class="demo-layout">
        <h2 class="demo-title">6. Blog Layout</h2>
        <div class="with-sidebar" style="--sidebar-width: 250px; --content-min: 65%;">
          <div class="not-sidebar">
            <div class="stack">
              <article class="box">
                <div class="stack">
                  <h3>Article Title</h3>
                  <p>This is the main content of a blog post. The layout uses <code>Sidebar</code> to create a responsive two-column layout that stacks on small screens.</p>
                  <p>You can fit plenty of content here, and it will maintain a reasonable measure for readability.</p>
                </div>
              </article>
              
              <article class="box">
                <div class="stack">
                  <h3>Another Article</h3>
                  <p>Here's another blog post or article. The content flows down in a <code>Stack</code> layout.</p>
                  <p>When the screen gets narrow enough, the sidebar will move below this content.</p>
                </div>
              </article>
            </div>
          </div>
          
          <div class="sidebar">
            <div class="stack">
              <div class="box sidebar-box">
                <div class="stack">
                  <h3>About</h3>
                  <p>A short description about the blog or website.</p>
                </div>
              </div>
              
              <div class="box sidebar-box">
                <div class="stack">
                  <h3>Categories</h3>
                  <ul class="stack" style="--space: 0.5rem; list-style: none; padding: 0;">
                    <li><a href="#">Category 1</a></li>
                    <li><a href="#">Category 2</a></li>
                    <li><a href="#">Category 3</a></li>
                  </ul>
                </div>
              </div>
              
              <div class="box sidebar-box">
                <div class="stack">
                  <h3>Recent Posts</h3>
                  <ul class="stack" style="--space: 0.5rem; list-style: none; padding: 0;">
                    <li><a href="#">Post Title 1</a></li>
                    <li><a href="#">Post Title 2</a></li>
                    <li><a href="#">Post Title 3</a></li>
                  </ul>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>
      
      <!-- EXAMPLE 7: Navigation Header -->
      <section class="demo-layout">
        <h2 class="demo-title">7. Navigation Header</h2>
        <header class="box">
          <div class="with-sidebar" style="--sidebar-width: 200px; --content-min: 70%;">
            <div class="sidebar">
              <h2>Site Logo</h2>
            </div>
            <div class="not-sidebar">
              <nav>
                <ul class="cluster" role="list" style="--space: var(--s2);">
                  <li role="listitem"><a href="#">Home</a></li>
                  <li role="listitem"><a href="#">About</a></li>
                  <li role="listitem"><a href="#">Services</a></li>
                  <li role="listitem"><a href="#">Products</a></li>
                  <li role="listitem"><a href="#">Contact</a></li>
                </ul>
              </nav>
            </div>
          </div>
        </header>
      </section>
      
      <!-- EXAMPLE 8: Image Gallery -->
      <section class="demo-layout">
        <h2 class="demo-title">8. Image Gallery</h2>
        <div class="reel" style="--height: 200px; --space: var(--s1);">
          <img src="https://via.placeholder.com/300x200" alt="Gallery image 1">
          <img src="https://via.placeholder.com/300x200" alt="Gallery image 2">
          <img src="https://via.placeholder.com/300x200" alt="Gallery image 3">
          <img src="https://via.placeholder.com/300x200" alt="Gallery image 4">
          <img src="https://via.placeholder.com/300x200" alt="Gallery image 5">
          <img src="https://via.placeholder.com/300x200" alt="Gallery image 6">
        </div>
      </section>
      
      <!-- EXAMPLE 9: Tag/Label Group -->
      <section class="demo-layout">
        <h2 class="demo-title">9. Tag/Label Group</h2>
        <div class="cluster" style="--space: 0.5rem;">
          <span class="tag">HTML</span>
          <span class="tag">CSS</span>
          <span class="tag">JavaScript</span>
          <span class="tag">Responsive Design</span>
          <span class="tag">Web Accessibility</span>
          <span class="tag">Performance</span>
          <span class="tag">UX Design</span>
        </div>
      </section>
      
      <!-- EXAMPLE 10: Modal/Dialog -->
      <section class="demo-layout">
        <h2 class="demo-title">10. Modal/Dialog (visualization)</h2>
        <div class="box" style="position: relative; min-height: 300px; background-color: #f5f5f5;">
          <div style="opacity: 0.3;">
            <p>This is the main page content that would be behind the modal. It is shown here with reduced opacity to demonstrate the modal's position.</p>
            <p>In a real implementation, you would control the visibility of the modal with JavaScript.</p>
          </div>
          
          <div class="imposter contain margin-medium">
            <div class="box card" style="width: 90%; max-width: 400px;">
              <div class="stack">
                <h3>Modal Title</h3>
                <p>This is a modal dialog created with the <code>Imposter</code> layout. In a real implementation, you would add proper accessibility attributes and focus management.</p>
                <div class="cluster justify-end">
                  <button class="secondary">Cancel</button>
                  <button>Confirm</button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>
      
      <!-- EXAMPLE 11: Full Page Layout -->
      <section class="demo-layout">
        <h2 class="demo-title">11. Full Page Layout (visualization)</h2>
        <div class="box" style="border: 2px dashed #999; padding: 0;">
          <div class="stack" style="min-height: 500px;">
            <header class="box" style="background-color: #f0f0f0; padding: var(--s1) 0;">
              <div class="center">
                <div class="with-sidebar" style="--sidebar-width: 150px;">
                  <div class="sidebar">
                    <h3 style="margin: 0;">Site Title</h3>
                  </div>
                  <div class="not-sidebar">
                    <nav class="cluster justify-end">
                      <a href="#">Home</a>
                      <a href="#">About</a>
                      <a href="#">Services</a>
                      <a href="#">Contact</a>
                    </nav>
                  </div>
                </div>
              </div>
            </header>
            
            <main class="center" style="flex-grow: 1;">
              <div class="stack">
                <h2>Main Content</h2>
                <p>This demonstrates a typical full page layout with header, main content area, and footer.</p>
                <p>The content is centered with a max-width for readability.</p>
                
                <div class="grid" style="--grid-min: 200px;">
                  <div class="demo-box">Card 1</div>
                  <div class="demo-box">Card 2</div>
                  <div class="demo-box">Card 3</div>
                </div>
              </div>
            </main>
            
            <footer class="box" style="background-color: #f0f0f0; padding: var(--s1) 0; margin-top: auto;">
              <div class="center">
                <div class="cluster justify-between align-center">
                  <p>&copy; 2023 Your Company</p>
                  <div class="cluster">
                    <a href="#">Terms</a>
                    <a href="#">Privacy</a>
                    <a href="#">Contact</a>
                  </div>
                </div>
              </div>
            </footer>
          </div>
        </div>
      </section>
      
      <!-- EXAMPLE 12: Form Layout -->
      <section class="demo-layout">
        <h2 class="demo-title">12. Form Layout</h2>
        <div class="box">
          <form class="stack">
            <h3>Contact Form</h3>
            
            <div class="stack" style="--space: var(--s2);">
              <div class="stack" style="--space: 0.5rem;">
                <label for="name">Name</label>
                <input type="text" id="name" style="width: 100%; padding: 0.5rem; border: 1px solid #ddd; border-radius: 4px;">
              </div>
              
              <div class="stack" style="--space: 0.5rem;">
                <label for="email">Email</label>
                <input type="email" id="email" style="width: 100%; padding: 0.5rem; border: 1px solid #ddd; border-radius: 4px;">
              </div>
              
              <div class="stack" style="--space: 0.5rem;">
                <label for="message">Message</label>
                <textarea id="message" rows="5" style="width: 100%; padding: 0.5rem; border: 1px solid #ddd; border-radius: 4px;"></textarea>
              </div>
              
              <div class="cluster justify-end">
                <button type="submit">Send Message</button>
              </div>
            </div>
          </form>
        </div>
      </section>
      
      <!-- EXAMPLE 13: Pricing Table -->
      <section class="demo-layout">
        <h2 class="demo-title">13. Pricing Table</h2>
        <div class="switcher" style="--threshold: 40rem;">
          <div class="box card">
            <div class="stack" style="--space: var(--s1); text-align: center;">
              <h3>Basic Plan</h3>
              <p style="font-size: 2rem; font-weight: bold;">$9.99<span style="font-size: 1rem; font-weight: normal;">/month</span></p>
              <ul class="stack" style="--space: 0.5rem; list-style: none; padding: 0; text-align: left;">
                <li>Feature 1</li>
                <li>Feature 2</li>
                <li>Feature 3</li>
              </ul>
              <button>Choose Plan</button>
            </div>
          </div>
          
          <div class="box card" style="border-color: #0077cc; border-width: 2px;">
            <div class="stack" style="--space: var(--s1); text-align: center;">
              <h3>Pro Plan</h3>
              <p style="font-size: 2rem; font-weight: bold;">$19.99<span style="font-size: 1rem; font-weight: normal;">/month</span></p>
              <ul class="stack" style="--space: 0.5rem; list-style: none; padding: 0; text-align: left;">
                <li>Feature 1</li>
                <li>Feature 2</li>
                <li>Feature 3</li>
                <li>Feature 4</li>
                <li>Feature 5</li>
              </ul>
              <button>Choose Plan</button>
            </div>
          </div>
          
          <div class="box card">
            <div class="stack" style="--space: var(--s1); text-align: center;">
              <h3>Enterprise Plan</h3>
              <p style="font-size: 2rem; font-weight: bold;">$49.99<span style="font-size: 1rem; font-weight: normal;">/month</span></p>
              <ul class="stack" style="--space: 0.5rem; list-style: none; padding: 0; text-align: left;">
                <li>Feature 1</li>
                <li>Feature 2</li>
                <li>Feature 3</li>
                <li>Feature 4</li>
                <li>Feature 5</li>
                <li>Feature 6</li>
                <li>Feature 7</li>
              </ul>
              <button>Choose Plan</button>
            </div>
          </div>
        </div>
      </section>
      
      <!-- EXAMPLE 14: Testimonial -->
      <section class="demo-layout">
        <h2 class="demo-title">14. Testimonial</h2>
        <div class="box" style="background-color: #f9f9f9;">
          <div class="stack" style="--space: var(--s2); text-align: center;">
            <div>
              <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="#0077cc" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M10 11h-4a1 1 0 0 1-1-1v-1a3 3 0 0 1 3-3v0a2 2 0 0 0 2-2v0a2 2 0 0 0-2-2v0a6 6 0 0 0-6 6v0 4a4 4 0 0 0 4 4h4a2 2 0 0 0 0-4v0z"></path>
                <path d="M22 11h-4a1 1 0 0 1-1-1v-1a3 3 0 0 1 3-3v0a2 2 0 0 0 2-2v0a2 2 0 0 0-2-2v0a6 6 0 0 0-6 6v0 4a4 4 0 0 0 4 4h4a2 2 0 0 0 0-4v0z"></path>
              </svg>
            </div>
            <blockquote style="font-style: italic; font-size: 1.25rem; max-width: 40ch; margin: 0 auto;">
              The Every Layout system has completely transformed how I approach CSS. No more struggling with media queries and pixel-perfect designs!
            </blockquote>
            <div class="with-sidebar" style="--sidebar-width: 60px; --content-min: 50%; justify-content: center;">
              <div class="sidebar">
                <img src="https://via.placeholder.com/60" alt="User avatar" class="avatar">
              </div>
              <div class="not-sidebar">
                <div class="stack" style="--space: 0.25rem; align-items: flex-start;">
                  <strong>Jane Doe</strong>
                  <em>Senior Developer</em>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>
      
      <!-- EXAMPLE 15: Stats Display -->
      <section class="demo-layout">
        <h2 class="demo-title">15. Stats Display</h2>
        <div class="box">
          <div class="grid" style="--grid-min: 150px;">
            <div class="stack" style="text-align: center;">
              <span style="font-size: 2.5rem; font-weight: bold; color: #0077cc;">500+</span>
              <span>Projects Completed</span>
            </div>
            <div class="stack" style="text-align: center;">
              <span style="font-size: 2.5rem; font-weight: bold; color: #0077cc;">95%</span>
              <span>Client Satisfaction</span>
            </div>
            <div class="stack" style="text-align: center;">
              <span style="font-size: 2.5rem; font-weight: bold; color: #0077cc;">50+</span>
              <span>Team Members</span>
            </div>
            <div class="stack" style="text-align: center;">
              <span style="font-size: 2.5rem; font-weight: bold; color: #0077cc;">10+</span>
              <span>Years of Experience</span>
            </div>
          </div>
        </div>
      </section>
      
      <footer class="stack" style="--space: var(--s1); margin-top: var(--s3);">
        <p>These examples demonstrate how to combine Every Layout primitives to create common UI patterns.</p>
        <p><small>&copy; 2023 Every Layout CSS Library</small></p>
      </footer>
    </div>
  </div>
  
  <!-- JavaScript for handling Reel overflow detection -->
  <script>
    (function() {
      const reels = Array.from(document.querySelectorAll('.reel'));
      const toggleOverflowClass = elem => {
        elem.classList.toggle('overflowing', elem.scrollWidth > elem.clientWidth);
      };
      
      for (let reel of reels) {
        if ('ResizeObserver' in window) {
          new ResizeObserver(entries => {
            toggleOverflowClass(entries[0].target);
          }).observe(reel);
        }
        
        if ('MutationObserver' in window) {
          new MutationObserver(entries => {
            toggleOverflowClass(entries[0].target);
          }).observe(reel, {childList: true});
        }
      }
    })();
  </script>
</body>
</html>

/*
 * Every Layout - Cover
 * A layout primitive for creating a cover with an optional header and footer
 */

.cover {
  /* Establish a column flex context */
  display: flex;
  flex-direction: column;
  
  /* Set minimum height (typically viewport height) */
  min-height: var(--min-height, 100vh);
  
  /* Apply padding */
  padding: var(--padding, var(--s1));
}

/* Add spacing between all direct children */
.cover > * {
  margin-block: var(--space, var(--s1));
}

/* Target the centered element (defaults to h1) */
.cover > h1,
.cover > [data-centered] {
  margin-block-start: auto;
  margin-block-end: auto;
}

/* Remove margin from the first child when it's not the centered element */
.cover > :first-child:not(h1):not([data-centered]) {
  margin-block-start: 0;
}

/* Remove margin from the last child when it's not the centered element */
.cover > :last-child:not(h1):not([data-centered]) {
  margin-block-end: 0;
}

/* Variants */
.cover.centered-content {
  text-align: center;
}

.cover.centered-content > * {
  margin-inline: auto;
}

.cover.min-height-medium {
  --min-height: 50vh;
}

.cover.space-large {
  --space: var(--s2);
}

.cover.padding-none {
  --padding: 0;
}

/* HTML usage:
<div class="cover">
  <header>Header content</header>
  <h1>Centered content</h1>
  <footer>Footer content</footer>
</div>

With custom centered element:
<div class="cover">
  <header>Header content</header>
  <div data-centered>Centered content</div>
  <footer>Footer content</footer>
</div>

With just centered content (no header/footer):
<div class="cover">
  <h1>Only centered content</h1>
</div>

With custom height:
<div class="cover" style="--min-height: 50vh;">
  <h1>Centered in 50vh</h1>
</div>
*/

/*
 * Every Layout - Cluster
 * A layout primitive for clusters of elements with consistent spacing
 */

.cluster {
  /* Set up flexbox context */
  display: flex;
  
  /* Allow wrapping */
  flex-wrap: wrap;
  
  /* Configure spacing between items */
  gap: var(--space, var(--s1));
  
  /* Default alignment */
  justify-content: flex-start;
  align-items: flex-start;
}

/* Alignment variations */
.cluster.justify-center {
  justify-content: center;
}

.cluster.justify-end {
  justify-content: flex-end;
}

.cluster.justify-between {
  justify-content: space-between;
}

.cluster.justify-around {
  justify-content: space-around;
}

.cluster.align-center {
  align-items: center;
}

.cluster.align-end {
  align-items: flex-end;
}

.cluster.align-stretch {
  align-items: stretch;
}

/* Spacing variations */
.cluster.space-small {
  --space: var(--s-1);
}

.cluster.space-large {
  --space: var(--s2);
}

/* For browsers that don't support gap */
@supports not (gap: 1rem) {
  .cluster {
    margin: calc(var(--space, var(--s1)) / 2 * -1);
  }
  
  .cluster > * {
    margin: calc(var(--space, var(--s1)) / 2);
  }
}

/* HTML usage:
<div class="cluster">
  <div>Item 1</div>
  <div>Item 2</div>
  <div>Item 3</div>
</div>

Centered:
<div class="cluster justify-center align-center">
  <div>Item 1</div>
  <div>Item 2</div>
  <div>Item 3</div>
</div>

Custom spacing:
<div class="cluster" style="--space: 2rem;">
  <div>Item 1</div>
  <div>Item 2</div>
</div>
*/

/*
 * Every Layout - Box
 * A layout primitive for creating boxed content
 */

.box {
  /* Apply padding based on modular scale */
  padding: var(--padding, var(--s1));
  
  /* Optional border */
  border-width: var(--border-width, var(--border-thin));
  
  /* Default colors */
  background-color: var(--color-light);
  color: var(--color-dark);
  
  /* For high contrast mode support */
  outline: var(--border-width, var(--border-thin)) transparent;
  outline-offset: calc(var(--border-width, var(--border-thin)) * -1);
}

/* Force children to inherit text color */
.box * {
  color: inherit;
}

/* Inverted version */
.box.invert {
  background-color: var(--color-dark);
  color: var(--color-light);
}

/* Optional variants */
.box.shadow {
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
}

.box.rounded {
  border-radius: var(--s-1);
}

.box.border-thick {
  --border-width: var(--border-thick);
}

.box.border-none {
  --border-width: 0;
}

.box.padding-large {
  --padding: var(--s2);
}

.box.padding-small {
  --padding: var(--s-1);
}

.box.padding-none {
  --padding: 0;
}

/* HTML usage:
<div class="box">
  Content goes here
</div>

Inverted:
<div class="box invert">
  Content goes here
</div>

With custom padding:
<div class="box" style="--padding: 2rem;">
  Content goes here
</div>
*/
