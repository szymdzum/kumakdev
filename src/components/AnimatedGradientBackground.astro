---
// No props needed for this component
---

<canvas class="gradient-background" aria-hidden="true"></canvas>

<style>
  .gradient-background {
    position: absolute;
    inset: 0;
    width: 100%;
    height: 100%;
    z-index: -10;
    opacity: 0.8;
  }
</style>

<script>
  document.addEventListener("astro:page-load", () => {
    const canvas = document.querySelector(".gradient-background");
    if (!canvas || !(canvas instanceof HTMLCanvasElement)) return;

    const ctx = canvas.getContext("2d");
    if (!ctx) return;

    // Set canvas dimensions
    const resizeCanvas = () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    };

    resizeCanvas();
    window.addEventListener("resize", resizeCanvas);

    // Animation variables
    let time = 0;
    const speed = 0.0008; // Slightly slower for a more subtle effect

    // Colors for the gradient (dark green to dark blue/purple tones)
    const darkColor = [0, 20, 15];
    const mediumColor = [5, 30, 35];
    const accentColor = [12, 20, 45];

    // Animation function
    const animate = () => {
      // Clear canvas
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      // Create radial gradient instead of linear
      const centerX = canvas.width / 2;
      const centerY = canvas.height / 2;

      // Animate the radius with a subtle breathing effect
      const maxRadius = Math.max(canvas.width, canvas.height);
      const innerRadius = 10;
      const outerRadius = maxRadius * (0.8 + Math.sin(time * 0.5) * 0.1);

      const gradient = ctx.createRadialGradient(
        centerX,
        centerY,
        innerRadius,
        centerX,
        centerY,
        outerRadius
      );

      // Animate gradient positions with sine waves
      const pos1 = 0.1;
      const pos2 = 0.4 + Math.sin(time * 0.4) * 0.1;
      const pos3 = 0.8 + Math.sin(time * 0.6) * 0.1;

      gradient.addColorStop(pos1, `rgb(${darkColor[0]}, ${darkColor[1]}, ${darkColor[2]})`);
      gradient.addColorStop(pos2, `rgb(${mediumColor[0]}, ${mediumColor[1]}, ${mediumColor[2]})`);
      gradient.addColorStop(pos3, `rgb(${accentColor[0]}, ${accentColor[1]}, ${accentColor[2]})`);

      // Fill background
      ctx.fillStyle = gradient;
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      // Update time
      time += speed;

      // Request next frame
      requestAnimationFrame(animate);
    };

    // Start animation
    animate();

    // Cleanup on page navigation
    return () => {
      window.removeEventListener("resize", resizeCanvas);
    };
  });
</script>
