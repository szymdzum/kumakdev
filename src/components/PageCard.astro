---
import { SITE } from "@/consts";
interface MenuItem {
  label: string;
  href: string;
  subItems?: MenuItem[];
}

// Data
const menuItems: MenuItem[] = [
  { label: "About Me", href: "/about" },
  {
    label: "Projects",
    href: "/projects",
    subItems: [
      {
        label: "TypeScript Result Monad",
        href: "https://github.com/szymdzum/ts-result-monad",
      },
    ],
  },
  {
    label: "Posts",
    href: "/posts",
    subItems: [
      { label: "A Guide To ADHD Engineering", href: "/posts/adhd-engineering" },
      {
        label: "Oldschool Form Validation",
        href: "/posts/oldschool-form-validation",
      },
    ],
  },
  { label: "Contact", href: "/contact" },
];

// Initial expanded state
const initialExpanded = {
  Projects: true,
  Posts: true,
};
---

<div class="w-full max-w-[320px] rounded-xl bg-[#1a1a1a] p-6 shadow-lg">
  <div class="mb-6 flex flex-row justify-between">
    <button
      class="flex items-center justify-between text-left text-[#d4b863] transition-colors hover:text-[#f0d080] focus:outline-none"
    >
      Kumak.dev
    </button>

    <button
      id="close-button"
      class="group relative transform overflow-hidden text-sm text-gray-400 transition-all duration-300 ease-in-out hover:scale-105 hover:text-white focus:outline-none"
    >
      <span class="relative">&lt;close/&gt;</span>
    </button>
  </div>

  <nav class="mt-6 mb-6">
    <ul class="space-y-6">
      {
        menuItems.map((item) => (
          <li>
            <div class="flex flex-col">
              {item.subItems ? (
                <button
                  data-menu-toggle={item.label}
                  class="flex w-full items-center justify-between text-left text-[#d4b863] transition-colors hover:text-[#f0d080] focus:outline-none"
                >
                  <span>{item.label}</span>
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    class:list={[
                      "transition-transform duration-300",
                      { "rotate-180 transform": initialExpanded[item.label] },
                    ]}
                    data-chevron={item.label}
                  >
                    <path d="m6 9 6 6 6-6" />
                  </svg>
                </button>
              ) : (
                <a
                  href={item.href}
                  class="block text-[#d4b863] transition-colors hover:text-[#f0d080]"
                >
                  {item.label}
                </a>
              )}

              {item.subItems && (
                <div
                  class:list={[
                    "overflow-hidden transition-all duration-300 ease-in-out",
                    initialExpanded[item.label] ? "max-h-40 opacity-100" : "max-h-0 opacity-0",
                  ]}
                  data-submenu={item.label}
                >
                  <ul class="mt-2 ml-6 space-y-2 border-l border-gray-700 pl-2">
                    {item.subItems.map((subItem, index) => (
                      <li
                        class:list={[
                          "transform transition-transform duration-300 ease-out",
                          initialExpanded[item.label] ? "translate-y-0" : "-translate-y-2",
                        ]}
                        style={`transition-delay: ${initialExpanded[item.label] ? index * 50 : 0}ms;`}
                      >
                        <a
                          href={subItem.href}
                          class="block py-1 text-gray-300 transition-colors hover:text-white"
                        >
                          {subItem.label}
                        </a>
                      </li>
                    ))}
                  </ul>
                </div>
              )}
            </div>
          </li>
        ))
      }
    </ul>
    <div class="mt-4 text-sm text-gray-400">
      &copy; {new Date().getFullYear()} â€¢ {SITE.TITLE}
    </div>
  </nav>
</div>

<script>
  // Handle toggle functionality
  document.querySelectorAll("[data-menu-toggle]").forEach((button) => {
    const label = button.getAttribute("data-menu-toggle");
    if (!label) return;

    const submenu = document.querySelector(`[data-submenu="${label}"]`);
    const chevron = document.querySelector(`[data-chevron="${label}"]`);

    if (!submenu || !chevron) return;

    button.addEventListener("click", () => {
      // Toggle submenu visibility
      submenu.classList.toggle("max-h-0");
      submenu.classList.toggle("opacity-0");
      submenu.classList.toggle("max-h-40");
      submenu.classList.toggle("opacity-100");

      // Toggle chevron rotation
      chevron.classList.toggle("transform");
      chevron.classList.toggle("rotate-180");

      // Toggle animation on child items
      submenu.querySelectorAll("li").forEach((item, index) => {
        item.classList.toggle("-translate-y-2");
        item.classList.toggle("translate-y-0");

        if (submenu.classList.contains("max-h-40")) {
          item.style.transitionDelay = `${index * 50}ms`;
        } else {
          item.style.transitionDelay = "0ms";
        }
      });
    });
  });

  // Handle close button animation
  const closeButton = document.getElementById("close-button");
  if (closeButton) {
    closeButton.addEventListener("click", () => {
      closeButton.classList.add("animate-pulse");
      setTimeout(() => {
        closeButton.classList.remove("animate-pulse");
      }, 300);
    });
  }
</script>
