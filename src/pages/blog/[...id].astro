---
import { type CollectionEntry, getCollection, render } from "astro:content";
import FormattedDate from "@/components/FormattedDate.astro";
import Giscus from "@/components/Giscus.astro";
import TableOfContents from "@/components/TableOfContents.astro";
import BackToPrevious from "@/components/navigation/BackToPrevious.astro";
import PostNavigation from "@/components/navigation/PostNavigation.astro";
import RootLayout from "@/layouts/RootLayout.astro";
import { readingTime } from "@/lib/utils";

export async function getStaticPaths() {
  const posts = (await getCollection("blog"))
    .filter((post) => !post.data.draft)
    .sort((a, b) => b.data.publishDate.valueOf() - a.data.publishDate.valueOf());
  return posts.map((post) => ({
    params: { id: post.id },
    props: post,
  }));
}
type Props = CollectionEntry<"blog">;

const posts = (await getCollection("blog"))
  .filter((post) => !post.data.draft)
  .sort((a, b) => b.data.publishDate.valueOf() - a.data.publishDate.valueOf());

function getNextPost() {
  let postIndex: number;
  for (const post of posts) {
    if (post.id === Astro.params.id) {
      postIndex = posts.indexOf(post);
      return posts[postIndex + 1];
    }
  }
}

function getPrevPost() {
  let postIndex: number;
  for (const post of posts) {
    if (post.id === Astro.params.id) {
      postIndex = posts.indexOf(post);
      return posts[postIndex - 1];
    }
  }
}

const nextPost = getNextPost();
const prevPost = getPrevPost();

const post = Astro.props;
const { Content, headings } = await render(post);
---

<RootLayout title={post.data.title} description={post.data.description}>
  <div>
    <BackToPrevious href="/blog">Back to blog</BackToPrevious>
  </div>
  <div>
    <div>
      <div>
        <FormattedDate date={post.data.publishDate} />
      </div>
      &bull;
      {post.body && <div>{readingTime(post.body)}</div>}
    </div>
    <h1>
      {post.data.title}
    </h1>
    {
      post.data.tags && post.data.tags?.length > 0 ? (
        <div>
          {post.data.tags.map((tag) => (
            <a href={`/tags/${tag}`}>{tag}</a>
          ))}
        </div>
      ) : null
    }
  </div>
  {headings.length > 0 && <TableOfContents headings={headings} />}
  <article>
    <Content />
    <div>
      <PostNavigation prevPost={prevPost} nextPost={nextPost} />
    </div>
    <div>
      <Giscus />
    </div>
  </article>
</RootLayout>
