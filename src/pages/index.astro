---
import AnimatedGradientBackground from '../components/AnimatedGradientBackground.astro';
import AnimatedText from '../components/AnimatedText.astro';
import Card from '../components/Card.astro';
import Header from '../components/navigation/Header.astro';
import RootLayout from '../layouts/RootLayout.astro';
import '../styles/index.css';
import { getCollection } from 'astro:content';

// Import content management
import { getSiteContent } from '../lib/content';
import type { Language } from '../lib/content';

const language: Language = 'en';
const content = getSiteContent(language);

// Get latest 3 blog posts
const blogPosts = await getCollection('blog', ({ data }) => {
  return !data.draft;
});

// Sort by date (newest first) and take only the latest 3
const latestPosts = blogPosts
  .sort((a, b) => b.data.publishDate.valueOf() - a.data.publishDate.valueOf())
  .slice(0, 3);
---

<RootLayout title={content.meta.title} description={content.meta.description}>
  <div class="portfolio">
    <Header language={language} />

    <main class="main-content">
      <!-- Hero Section -->
      <section class="hero-section">
        <AnimatedGradientBackground />
        <div class="hero-content">
          <div class="hero-header">
            <!-- English title option -->
            <h1 class="hero-main-title">
              <span class="hero-title-line">{content.hero.mainTitle}</span>
              <span class="hero-title-line hero-title-line-alt">{content.hero.secondaryTitle}</span>
            </h1>

            {
              /* Polish title option (uncomment to use)
            <h1 class="hero-main-title">
              <span class="hero-title-line">ROZWIĄZYWANIE PROBLEMÓW</span>
              <span class="hero-title-line hero-title-line-alt">Z KODEM</span>
            </h1>
            */
            }
          </div>
          <div class="hero-text">
            <h2 class="hero-subtitle">
              <AnimatedText text={content.hero.subtitle} />
            </h2>
            <p class="hero-description fade-in">
              {content.hero.description}
            </p>
          </div>
          <div class="hero-buttons fade-in-delay">
            <a href="#projects" class="primary-button">{content.hero.cta.primary}</a>
            <a href="#contact" class="outline-button">{content.hero.cta.secondary}</a>
          </div>
        </div>
        <a href="#blog" class="scroll-indicator" aria-label="Scroll to next section">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          >
            <path d="M12 5v14"></path>
            <path d="m19 12-7 7-7-7"></path>
          </svg>
        </a>
      </section>

      <div class="separator"></div>

      <!-- Featured Blog Posts -->
      <section id="blog" class="blog-section">
        <div class="container">
          <div class="section-intro">
            <h2 class="section-title">{content.blog.sectionTitle}</h2>
            <div class="section-subheader">
              <p class="section-description">{content.blog.description}</p>
            </div>
          </div>

          <div class="section-header">
            <div></div>
            <!-- Empty div for flex spacing -->
            <a href="/blog" class="view-all">
              {content.blog.viewAll}
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                class="icon-arrow"
              >
                <path d="M5 12h14"></path>
                <path d="m12 5 7 7-7 7"></path>
              </svg>
            </a>
          </div>

          <div class="blog-grid">
            {
              latestPosts.map((post) => (
                <Card
                  type="blog"
                  date={new Date(post.data.publishDate).toLocaleDateString('en-US', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                  })}
                  readTime={post.data.readTime}
                  title={post.data.title}
                  description={post.data.description}
                  link={`/blog/${post.slug}`}
                />
              ))
            }
          </div>
        </div>
      </section>

      <div class="separator"></div>

      <!-- Projects Section -->
      <section id="projects" class="projects-section">
        <div class="projects-wrapper">
          <div class="container">
            <div class="section-intro">
              <h2 class="section-title">{content.projects.sectionTitle}</h2>
              <div class="section-subheader">
                <p class="section-description">{content.projects.description}</p>
              </div>
            </div>

            <div class="section-header">
              <div></div>
              <!-- Empty div for flex spacing -->
              <a href="/projects" class="view-all">
                {content.projects.viewAll}
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  class="icon-arrow"
                >
                  <path d="M5 12h14"></path>
                  <path d="m12 5 7 7-7 7"></path>
                </svg>
              </a>
            </div>

            <div class="projects-grid">
              {
                content.projects.items.map((project) => (
                  <Card
                    type="project"
                    title={project.title}
                    description={project.description}
                    tags={project.tags}
                    link={project.link}
                    imageUrl={project.imageUrl}
                  />
                ))
              }
            </div>
          </div>
        </div>
      </section>

      <div class="separator"></div>

      <!-- About Section -->
      <section id="about" class="about-section">
        <div class="container">
          <h2 class="section-title">{content.about.sectionTitle}</h2>

          <div class="about-content">
            <div class="profile-image reveal-item">
              <img src={content.about.profileImage} alt={content.about.imageAlt} />
            </div>

            <div class="about-text">
              {
                content.about.paragraphs.map((paragraph, index) => (
                  <p
                    class:list={[
                      'reveal-item',
                      index === 0
                        ? 'reveal-delay-1'
                        : index === 1
                          ? 'reveal-delay-2'
                          : 'reveal-delay-3',
                    ]}
                  >
                    {paragraph}
                  </p>
                ))
              }

              <div class="about-button-container reveal-item reveal-delay-4">
                <a href="/about" class="outline-button">{content.about.moreButton}</a>
              </div>
            </div>
          </div>
        </div>
      </section>

      <div class="separator"></div>

      <!-- Newsletter Section -->
      <section id="newsletter" class="newsletter-section">
        <div class="container">
          <div class="newsletter-content">
            <h2 class="section-title">{content.newsletter.sectionTitle}</h2>
            <p class="newsletter-description">
              {content.newsletter.description}
            </p>

            <form class="newsletter-form">
              <input
                type="email"
                placeholder={content.newsletter.inputPlaceholder}
                aria-label={content.newsletter.inputAriaLabel}
                class="newsletter-input"
              />
              <button type="submit" class="primary-button">{content.newsletter.buttonText}</button>
            </form>
            <p class="privacy-note">{content.newsletter.privacyNote}</p>
          </div>
        </div>
      </section>
    </main>

    <!-- Footer -->
    <footer class="footer">
      <div class="container">
        <div class="footer-main">
          <div class="footer-brand">
            <a href="/" class="footer-logo">{content.footer.logo}</a>
            <p class="footer-tagline">{content.footer.tagline}</p>
          </div>

          <div class="social-links">
            <a
              href="https://twitter.com"
              class="social-link"
              aria-label={content.footer.socialAriaLabels.twitter}
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <path
                  d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z"
                ></path>
              </svg>
            </a>
            <a
              href="https://github.com"
              class="social-link"
              aria-label={content.footer.socialAriaLabels.github}
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <path
                  d="M15 22v-4a4.8 4.8 0 0 0-1-3.5c3 0 6-2 6-5.5.08-1.25-.27-2.48-1-3.5.28-1.15.28-2.35 0-3.5 0 0-1 0-3 1.5-2.64-.5-5.36-.5-8 0C6 2 5 2 5 2c-.3 1.15-.3 2.35 0 3.5A5.403 5.403 0 0 0 4 9c0 3.5 3 5.5 6 5.5-.39.49-.68 1.05-.85 1.65-.17.6-.22 1.23-.15 1.85v4"
                ></path>
                <path d="M9 18c-4.51 2-5-2-7-2"></path>
              </svg>
            </a>
          </div>
        </div>

        <div class="footer-bottom">
          <p class="copyright">{content.footer.copyright(new Date().getFullYear())}</p>

          <nav class="footer-nav">
            <a href="/privacy" class="footer-nav-link">{content.footer.links.privacy}</a>
            <a href="/terms" class="footer-nav-link">{content.footer.links.terms}</a>
          </nav>
        </div>
      </div>
    </footer>
  </div>
</RootLayout>

<script>
  // Add client-side language initialization
  import { initLanguage } from '../lib/language-client';

  document.addEventListener('DOMContentLoaded', () => {
    // Initialize language
    initLanguage();
  });

  // Scroll detection for header styling
  function handleScroll() {
    if (window.scrollY > 10) {
      document.documentElement.classList.add('scrolled');
    } else {
      document.documentElement.classList.remove('scrolled');
    }
  }

  // Reveal elements on scroll
  function handleRevealElements() {
    const revealItems = document.querySelectorAll('.reveal-item');

    revealItems.forEach((item) => {
      const elementTop = item.getBoundingClientRect().top;
      const windowHeight = window.innerHeight;

      if (elementTop < windowHeight * 0.85) {
        item.classList.add('visible');
      }
    });
  }

  // Smooth scroll function for all anchor links
  function setupSmoothScroll() {
    document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
      anchor.addEventListener('click', function (this: HTMLAnchorElement, e: Event) {
        e.preventDefault();

        const targetId = this.getAttribute('href') || '';
        const targetElement = document.querySelector(targetId);

        if (targetElement) {
          const offsetTop = targetElement.getBoundingClientRect().top + window.scrollY;

          window.scrollTo({
            top: offsetTop - 80, // Adjust for header height
            behavior: 'smooth',
          });

          // Update URL hash without scrolling
          history.pushState(null, '', targetId);
        }
      });
    });
  }

  // Initialize on load
  document.addEventListener('DOMContentLoaded', () => {
    // Check initial scroll position
    handleScroll();

    // Check for elements to reveal
    handleRevealElements();

    // Add scroll event listeners
    window.addEventListener('scroll', handleScroll);
    window.addEventListener('scroll', handleRevealElements);

    // Setup smooth scrolling
    setupSmoothScroll();
  });

  // Handle Astro page transitions
  document.addEventListener('astro:page-load', () => {
    // Check initial scroll position after page transitions
    handleScroll();

    // Check for elements to reveal
    handleRevealElements();

    // Setup smooth scrolling after page transitions
    setupSmoothScroll();
  });
</script>
